diff -Naur zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/CMakeLists.txt zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/CMakeLists.txt
--- zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/CMakeLists.txt	2018-10-23 14:14:42.000000000 +0100
@@ -0,0 +1 @@
+zephyr_sources()
diff -Naur zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.defconfig.series zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.defconfig.series
--- zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.defconfig.series	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.defconfig.series	2018-10-28 09:50:42.312500000 +0000
@@ -0,0 +1,43 @@
+if SOC_SERIES_RISCV32_NGRRISCV
+
+config SOC_SERIES
+	string
+	default "ngrriscv"
+
+config SYS_CLOCK_HW_CYCLES_PER_SEC
+	int
+	default 50000000
+
+config RISCV_SOC_INTERRUPT_INIT
+	bool
+	default y
+
+config RISCV_HAS_CPU_IDLE
+	bool
+	default n
+
+config RISCV_HAS_PLIC
+	bool
+	default n
+
+config NUM_IRQS
+	int
+	default 16
+
+config RISCV_ROM_BASE_ADDR
+	hex
+	default 0x80000000
+
+config RISCV_ROM_SIZE
+	hex
+	default 0x4000
+
+config RISCV_RAM_BASE_ADDR
+	hex
+	default	0x80004000
+
+config RISCV_RAM_SIZE
+	hex
+	default 0x4000
+
+endif # SOC_SERIES_RISCV32_NGRRISCV
diff -Naur zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.series zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.series
--- zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.series	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.series	2018-10-28 09:33:01.626000000 +0000
@@ -0,0 +1,11 @@
+# Kconfig - RISCV32_NGRRISCV implementation
+#
+# Copyright (c) 2018 Nelson Ribeiro
+#
+
+config SOC_SERIES_RISCV32_NGRRISCV
+	bool "ngrriscv CPU SOC implementation"
+	depends on RISCV32
+	select SOC_FAMILY_RISCV_PRIVILEGE
+	help
+	Enable support for ngrriscv CPU module
diff -Naur zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.soc zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.soc
--- zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.soc	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/Kconfig.soc	2018-10-28 10:01:59.956500000 +0000
@@ -0,0 +1,9 @@
+choice
+prompt "Gnarly Grey UPDuino ngrriscv system implementation"
+depends on SOC_SERIES_RISCV32_NGRRISCV
+
+config SOC_RISCV32_NGRRISCV
+	bool "ngrriscv CPU SOC implementation"
+
+
+endchoice
diff -Naur zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/linker.ld zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/linker.ld
--- zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/linker.ld	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/linker.ld	2018-10-28 11:18:52.256000000 +0000
@@ -0,0 +1,161 @@
+/*
+ * Copyright (c) 2016-2017 Jean-Paul Etienne <fractalclone@gmail.com>
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+/**
+ * @file
+ * @brief Linker command/script file
+ *
+ * Generic Linker script for the riscv32 platform
+ */
+
+#define _LINKER
+#define _ASMLANGUAGE
+
+#include <soc.h>
+
+#include <autoconf.h>
+#include <linker/sections.h>
+
+#include <linker/linker-defs.h>
+#include <linker/linker-tool.h>
+
+
+#define ROMABLE_REGION              ROM
+#define RAMABLE_REGION              RAM
+
+#define _VECTOR_SECTION_NAME        vector
+#define _EXCEPTION_SECTION_NAME     exceptions
+#define _RESET_SECTION_NAME         reset
+
+MEMORY
+{
+    ROM (rx)  : ORIGIN = CONFIG_RISCV_ROM_BASE_ADDR, LENGTH = CONFIG_RISCV_ROM_SIZE
+    RAM (rwx) : ORIGIN = CONFIG_RISCV_RAM_BASE_ADDR, LENGTH = RISCV_RAM_SIZE
+    /* Used by and documented in include/linker/intlist.ld */
+    IDT_LIST  (wx)      : ORIGIN = 0xFFFFF7FF, LENGTH = 2K
+}
+
+ENTRY(CONFIG_KERNEL_ENTRY)
+
+SECTIONS
+    {
+
+    GROUP_START(ROM)
+    _image_rom_start = .;
+
+    SECTION_PROLOGUE(_VECTOR_SECTION_NAME,,)
+    {
+		. = ALIGN(4);
+		KEEP(*(.vectors.*))
+    } GROUP_LINK_IN(ROM)
+
+    GROUP_END(ROM)
+
+    GROUP_START(ROMABLE_REGION)
+
+    SECTION_PROLOGUE(_RESET_SECTION_NAME,,)
+    {
+		KEEP(*(.reset.*))
+    } GROUP_LINK_IN(ROMABLE_REGION)
+
+    SECTION_PROLOGUE(_EXCEPTION_SECTION_NAME,,)
+    {
+		 KEEP(*(".exception.entry.*"))
+		 *(".exception.other.*")
+    } GROUP_LINK_IN(ROMABLE_REGION)
+
+    SECTION_PROLOGUE(_TEXT_SECTION_NAME,,)
+	{
+		. = ALIGN(4);
+#ifdef CONFIG_GEN_SW_ISR_TABLE
+		KEEP(*(SW_ISR_TABLE))
+#endif
+		KEEP(*(.openocd_debug))
+		KEEP(*(".openocd_debug.*"))
+
+		_image_text_start = .;
+		*(.text)
+		*(".text.*")
+		*(.gnu.linkonce.t.*)
+		*(.eh_frame)
+	} GROUP_LINK_IN(ROMABLE_REGION)
+
+    _image_text_end = .;
+
+#include <linker/common-rom.ld>
+
+    SECTION_PROLOGUE(_RODATA_SECTION_NAME,,)
+	{
+		 . = ALIGN(4);
+		 *(.rodata)
+		 *(".rodata.*")
+		 *(.gnu.linkonce.r.*)
+	} GROUP_LINK_IN(ROMABLE_REGION)
+
+    _image_rom_end = .;
+    __data_rom_start = .;
+
+    GROUP_END(ROMABLE_REGION)
+
+    GROUP_START(RAMABLE_REGION)
+
+    SECTION_DATA_PROLOGUE(_DATA_SECTION_NAME,,)
+	{
+		 . = ALIGN(4);
+		 _image_ram_start = .;
+		 __data_ram_start = .;
+
+		 *(.data)
+		 *(".data.*")
+
+		 *(.sdata .sdata.* .gnu.linkonce.s.*)
+		 *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
+
+	}  GROUP_DATA_LINK_IN(RAMABLE_REGION, ROMABLE_REGION)
+
+#include <linker/common-ram.ld>
+
+    __data_ram_end = .;
+
+    SECTION_DATA_PROLOGUE(_BSS_SECTION_NAME,(NOLOAD),)
+	{
+		/*
+		 * For performance, BSS section is assumed to be 4 byte aligned and
+		 * a multiple of 4 bytes
+		 */
+		 . = ALIGN(4);
+		 __bss_start = .;
+		 *(.sbss)
+		 *(".sbss.*")
+		 *(.bss)
+		 *(".bss.*")
+		 COMMON_SYMBOLS
+		 /*
+		  * As memory is cleared in words only, it is simpler to ensure the BSS
+		  * section ends on a 4 byte boundary. This wastes a maximum of 3 bytes.
+		  */
+		  __bss_end = ALIGN(4);
+	}  GROUP_DATA_LINK_IN(RAMABLE_REGION, RAMABLE_REGION)
+
+    SECTION_PROLOGUE(_NOINIT_SECTION_NAME,(NOLOAD),)
+	{
+		/*
+		 * This section is used for non-initialized objects that
+		 * will not be cleared during the boot process.
+		 */
+		 *(.noinit)
+		 *(".noinit.*")
+	} GROUP_LINK_IN(RAMABLE_REGION)
+
+     _image_ram_end = .;
+     _end = .; /* end of image */
+
+#ifdef CONFIG_GEN_ISR_TABLES
+#include <linker/intlist.ld>
+#endif
+
+     GROUP_END(RAMABLE_REGION)
+}
diff -Naur zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/soc.h zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/soc.h
--- zephyr-zephyr-v1.13.0/arch/riscv32/soc/riscv-privilege/ngrriscv/soc.h	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/arch/riscv32/soc/riscv-privilege/ngrriscv/soc.h	2018-10-28 10:56:45.065000000 +0000
@@ -0,0 +1,25 @@
+#ifndef __RISCV32_NGRRISCV_SOC_H_
+#define __RISCV32_NGRRISCV_SOC_H_
+
+#include <soc_common.h>
+
+/* UART Configuration */
+#define UART_BASE_ADDRESS        (0x8000C000)
+#define UART_DATA_RX_REG         (UART_BASE_ADDRESS + 0x0)
+#define UART_DATA_TX_REG         (UART_BASE_ADDRESS + 0x0)
+#define UART_STATUS_REG          (UART_BASE_ADDRESS + 0x4)
+#define UART_CONTROL_REG         (UART_BASE_ADDRESS + 0x4)
+
+#define RX_READY_FLAG_BIT        (1<<0)
+#define TX_BUSY_FLAG_BIT         (1<<1)
+#define SEND_TX_BIT              (1<<4)
+
+/* Timer configuration */
+#define RISCV_MTIME_BASE         0x8000C008
+#define RISCV_MTIMECMP_BASE      0x8000C00C
+
+/* lib-c hooks required RAM defined variables */
+#define RISCV_RAM_BASE           CONFIG_RISCV_RAM_BASE_ADDR
+#define RISCV_RAM_SIZE           CONFIG_RISCV_RAM_SIZE
+
+#endif /* __RISCV32_NGRRISCV_SOC_H_ */
diff -Naur zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/board.h zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/board.h
--- zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/board.h	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/board.h	2018-10-23 14:14:42.000000000 +0100
@@ -0,0 +1,14 @@
+/*
+ * Copyright (c) 2018 MicroFPGA UG
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#ifndef __INC_BOARD_H
+#define __INC_BOARD_H
+
+#include <soc.h>
+
+
+
+#endif /* __INC_BOARD_H */
diff -Naur zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/CMakeLists.txt zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/CMakeLists.txt
--- zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/CMakeLists.txt	2018-10-23 14:14:42.000000000 +0100
@@ -0,0 +1 @@
+zephyr_library_include_directories(${PROJECT_SOURCE_DIR}/drivers)
diff -Naur zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/doc/ggupduino2_ngrriscv.rst zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/doc/ggupduino2_ngrriscv.rst
--- zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/doc/ggupduino2_ngrriscv.rst	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/doc/ggupduino2_ngrriscv.rst	2018-10-28 11:51:42.021000000 +0000
@@ -0,0 +1,7 @@
+.. _ggupduino2_ngrriscv:
+
+Gnarly Grey UPDuino V2
+######################
+
+Get more information at:
+http://www.latticesemi.com/en/Products/DevelopmentBoardsAndKits/GnarlyGreyUPDuinoBoard
diff -Naur zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/ggupduino2_ngrriscv.yaml zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/ggupduino2_ngrriscv.yaml
--- zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/ggupduino2_ngrriscv.yaml	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/ggupduino2_ngrriscv.yaml	2018-10-28 09:59:11.396500000 +0000
@@ -0,0 +1,11 @@
+identifier: ggupduino2_ngrriscv
+name: Gnarly Grey UPDuino with ngrriscv target
+type: mcu
+arch: riscv32
+toolchain:
+  - zephyr
+ram: 32
+testing:
+  ignore_tags:
+    - net
+    - bluetooth
diff -Naur zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/ggupduino2_ngrriscv_defconfig zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/ggupduino2_ngrriscv_defconfig
--- zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/ggupduino2_ngrriscv_defconfig	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/ggupduino2_ngrriscv_defconfig	2018-10-28 10:30:09.543500000 +0000
@@ -0,0 +1,11 @@
+CONFIG_RISCV32=y
+CONFIG_SOC_SERIES_RISCV32_NGRRISCV=y
+CONFIG_SOC_RISCV32_NGRRISCV=y
+CONFIG_BOARD_GGUPDUINO2_NGRRISCV=y
+CONFIG_CONSOLE=y
+CONFIG_SERIAL=y
+CONFIG_UART_NGRRISCV=y
+CONFIG_UART_CONSOLE=y
+CONFIG_PLIC=n
+CONFIG_RISCV_MACHINE_TIMER=y
+CONFIG_GPIO=n
diff -Naur zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/Kconfig.board zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/Kconfig.board
--- zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/Kconfig.board	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/Kconfig.board	2018-10-28 09:26:58.740000000 +0000
@@ -0,0 +1,3 @@
+config BOARD_GGUPDUINO2_NGRRISCV
+	bool "Gnarly Grey UPDuinoV2 dev board with ngrriscv CPU"
+	depends on SOC_RISCV32_NGRRISCV
diff -Naur zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/Kconfig.defconfig zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/Kconfig.defconfig
--- zephyr-zephyr-v1.13.0/boards/riscv32/ggupduino2_ngrriscv/Kconfig.defconfig	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/boards/riscv32/ggupduino2_ngrriscv/Kconfig.defconfig	2018-10-28 09:27:11.984000000 +0000
@@ -0,0 +1,6 @@
+if BOARD_GGUPDUINO2_NGRRISCV
+
+config BOARD
+	default "ggupduino2_ngrriscv"
+
+endif
diff -Naur zephyr-zephyr-v1.13.0/drivers/serial/CMakeLists.txt zephyr-zephyr-v1.13.0_ngrriscv/drivers/serial/CMakeLists.txt
--- zephyr-zephyr-v1.13.0/drivers/serial/CMakeLists.txt	2018-09-11 01:14:13.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/drivers/serial/CMakeLists.txt	2018-10-27 18:44:45.613500000 +0100
@@ -23,5 +23,8 @@
 zephyr_library_sources_if_kconfig(uart_stm32.c)
 zephyr_library_sources_if_kconfig(uart_sam0.c)
 zephyr_library_sources_if_kconfig(usart_mcux_lpc.c)
+zephyr_library_sources_if_kconfig(uart_ngrriscv.c)
 
 zephyr_library_sources_ifdef(CONFIG_USERSPACE   uart_handlers.c)
+
+
diff -Naur zephyr-zephyr-v1.13.0/drivers/serial/Kconfig zephyr-zephyr-v1.13.0_ngrriscv/drivers/serial/Kconfig
--- zephyr-zephyr-v1.13.0/drivers/serial/Kconfig	2018-09-11 01:14:13.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/drivers/serial/Kconfig	2018-10-27 18:44:31.309000000 +0100
@@ -101,4 +101,6 @@
 
 source "drivers/serial/Kconfig.sam0"
 
+source "drivers/serial/Kconfig.ngrriscv"
+
 endif
diff -Naur zephyr-zephyr-v1.13.0/drivers/serial/Kconfig.ngrriscv zephyr-zephyr-v1.13.0_ngrriscv/drivers/serial/Kconfig.ngrriscv
--- zephyr-zephyr-v1.13.0/drivers/serial/Kconfig.ngrriscv	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/drivers/serial/Kconfig.ngrriscv	2018-10-28 09:55:11.663500000 +0000
@@ -0,0 +1,6 @@
+menuconfig UART_NGRRISCV
+	bool "ngrriscv UART driver"
+	depends on SOC_RISCV32_NGRRISCV
+	select SERIAL_HAS_DRIVER
+	help
+          Enable the ngrriscv UART driver.
diff -Naur zephyr-zephyr-v1.13.0/drivers/serial/uart_ngrriscv.c zephyr-zephyr-v1.13.0_ngrriscv/drivers/serial/uart_ngrriscv.c
--- zephyr-zephyr-v1.13.0/drivers/serial/uart_ngrriscv.c	1970-01-01 01:00:00.000000000 +0100
+++ zephyr-zephyr-v1.13.0_ngrriscv/drivers/serial/uart_ngrriscv.c	2018-10-28 10:57:13.354000000 +0000
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2018 Nelson Ribeiro
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ */
+
+#include <kernel.h>
+#include <arch/cpu.h>
+#include <uart.h>
+#include <sys_io.h>
+#include <board.h>
+#include <soc.h>
+
+static unsigned char ngrriscv_uart_tx(struct device *dev, unsigned char c){
+	ARG_UNUSED(dev);
+
+    while (((*(volatile unsigned int*)(UART_STATUS_REG)) & TX_BUSY_FLAG_BIT) == TX_BUSY_FLAG_BIT);
+	(*(volatile unsigned int *)(UART_DATA_TX_REG) = c);
+    (*(volatile unsigned int *)(UART_CONTROL_REG) = SEND_TX_BIT); 
+
+	return c;
+}
+
+static int ngrriscv_uart_rx(struct device *dev, unsigned char *c){
+	ARG_UNUSED(dev);
+
+	while (((*(volatile unsigned int*)(UART_STATUS_REG)) & RX_READY_FLAG_BIT) != RX_READY_FLAG_BIT);
+	*c=(unsigned char)(*(volatile unsigned int*)(UART_DATA_RX_REG));
+
+	return 0;
+}
+
+static int uart_ngrriscv_init(struct device *dev){
+	/* Nothing to do */
+
+	return 0;
+}
+
+
+static const struct uart_driver_api uart_ngrriscv_driver_api = {
+	.poll_in = &ngrriscv_uart_rx,
+	.poll_out = &ngrriscv_uart_tx,
+	.err_check = NULL,
+};
+
+
+DEVICE_AND_API_INIT(uart_ngrriscv_0, "NGRRISCV_UART",
+		    uart_ngrriscv_init, NULL, NULL,
+		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
+		    (void *)&uart_ngrriscv_driver_api);
+
+
+
